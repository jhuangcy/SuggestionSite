@page "/admin/manage"
@attribute [Authorize(Policy = "Admin")]
@inject NavigationManager nav
@inject IUserService userService
@inject ISuggestionService suggestionService

<h1 class="text-uppercase text-center mb-4">Manage Suggestions</h1>

<div class="row align-items-baseline mb-3">
    <div class="suggestions-count col-8 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-4 d-flex justify-content-end">
        <button class="btn-close btn-close-white" @onclick="ClosePage"></button>
    </div>
</div>

@if (suggestions != null)
{
    foreach (var s in suggestions)
    {
        <div class="submission row p-3 mb-3 bg-white">
            <div class="col-sm-4 col-md-3 col-lg-2 d-flex flex-row flex-sm-column justify-content-center">
                <button class="btn-approve btn w-100 border-3" @onclick="(() => Approve(s))">Approve</button>
                <button class="btn-reject btn w-100 border-3" @onclick="(() => Reject(s))">Reject</button>
            </div>

            <div class="col-sm-8 col-md-9 col-lg-10">
                <div>
                    @if (currentName == s.Id)
                    {
                        <EditForm Model="editedName" class="d-flex" OnSubmit="(() => SaveName(s))">
                            <InputText class="approval-edit-field form-control flex-grow-1" @bind-Value="editedName"></InputText>
                            <button type="submit" class="btn">
                                <span class="submission-edit-approve oi oi-check"></span>
                            </button>
                            <button class="btn" @onclick="(() => currentName = string.Empty)">
                                <span class="submission-edit-reject oi oi-x"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        <span class="suggestion-name">@s.Name</span>
                        <span class="oi oi-pencil px-3" @onclick="(() => EditName(s))"></span>
                    }
                </div>

                <div>@s.Category.Name</div>
                <div>@s.Author.DisplayName</div>

                <div>
                    @if (currentDesc == s.Id)
                    {
                        <EditForm Model="editedDesc" class="d-flex" OnSubmit="(() => SaveDesc(s))">
                            <InputTextArea class="approval-edit-field form-control flex-grow-1" @bind-Value="editedDesc"></InputTextArea>
                            <button type="submit" class="btn">
                                <span class="submission-edit-approve oi oi-check"></span>
                            </button>
                            <button class="btn" @onclick="(() => currentDesc = string.Empty)">
                                <span class="submission-edit-reject oi oi-x"></span>
                            </button>
                        </EditForm>
                    }
                    else
                    {
                        <span class="suggestion-desc">@s.Description</span>
                        <span class="oi oi-pencil px-3" @onclick="(() => EditDesc(s))"></span>
                    }
                </div>
            </div>
        </div>
    }
}

@code {
    List<Suggestion> suggestions;
    Suggestion editing;
    string currentName = "";
    string editedName = "";
    string currentDesc = "";
    string editedDesc = "";

    protected override void OnInitialized()
    {
        suggestions = suggestionService.FindAllNonApproved();
    }

    async Task Approve(Suggestion suggestion)
    {
        suggestion.Approved = true;
        suggestions.Remove(suggestion);
        await suggestionService.ReplaceOneAsync(suggestion);
    }

    async Task Reject(Suggestion suggestion)
    {
        suggestion.Rejected = true;
        suggestions.Remove(suggestion);
        await suggestionService.ReplaceOneAsync(suggestion);
    }

    void EditName(Suggestion suggestion)
    {
        editing = suggestion;
        editedName = suggestion.Name;
        currentName = suggestion.Id;
        currentDesc = "";
    }

    void EditDesc(Suggestion suggestion)
    {
        editing = suggestion;
        editedDesc = suggestion.Description;
        currentName = "";
        currentDesc = suggestion.Id;
    }

    async Task SaveName(Suggestion suggestion)
    {
        currentName = "";
        suggestion.Name = editedName;
        await suggestionService.ReplaceOneAsync(suggestion);
    }

    async Task SaveDesc(Suggestion suggestion)
    {
        currentDesc = "";
        suggestion.Description = editedDesc;
        await suggestionService.ReplaceOneAsync(suggestion);
    }

    void ClosePage() => nav.NavigateTo("/");
}
