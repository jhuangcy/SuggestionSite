@page "/"
@inject NavigationManager nav
@inject ProtectedSessionStorage storage
@inject AuthenticationStateProvider auth
@inject ICategoryService categoryService
@inject IStatusService statusService
@inject IUserService userService
@inject ISuggestionService suggestionService

<h1 class="text-uppercase text-center mb-4">Training Suggestions</h1>

<div class="text-center mb-3 mb-md-5">
    <button class="suggest-btn btn btn-outline-light btn-lg text-uppercase px-4 border-3" @onclick="GoSuggest">Suggest</button>
</div>

<div class="row">
    <div class="suggestions-count col-md-4 text-light mt-2">@suggestions?.Count Suggestions</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn-order btn @GetSortNewClass(true)" @onclick="(() => SortByNew(true))">New</button>
        <button class="btn-order btn @GetSortNewClass(false)" @onclick="(() => SortByNew(false))">Popular</button>
    </div>
    <div class="search-box col-md-4 col-xl-3 mt-2 mt-md-0">
        <input type="text" class="form-control rounded-control" placeholder="Search" @oninput="(txt => SearchInput((string)txt.Value))" aria-label="search box" />
    </div>

    @* Shown on small devices *@
    <div class="col-12 d-block d-md-none">
        @if (categories != null && showCategories)
        {
            <div class="categories mt-2 m-md-3 p-3">
                <span class="text-uppercase fw-bold">Category</span>
                <div class="mt-3 @GetSelectedCategory()" @onclick="(() => ChangeCategory())">All</div>
                @foreach (var c in categories)
                {
                    <div class="mt-3 @GetSelectedCategory(c.Name)" @onclick="(() => ChangeCategory(c.Name))">@c.Name</div>
                }
            </div>
        }
        else
        {
            <div class="categories mt-2 m-md-3 p-3" @onclick="(() => showCategories = true)">
                Category: <span class="selected-category">@categoryFilter</span>
            </div>
        }

        @if (statuses != null && showStatuses)
        {
            <div class="statuses mt-2 m-md-3 p-3">
                <span class="text-uppercase fw-bold">Status</span>
                <div class="mt-3 @GetSelectedStatus()" @onclick="(() => ChangeStatus())">All</div>
                @foreach (var s in statuses)
                {
                    <div class="mt-3 @GetSelectedStatus(s.Name)" @onclick="(() => ChangeStatus(s.Name))">@s.Name</div>
                }
            </div>
        }
        else
        {
            <div class="statuses mt-2 m-md-3 p-3" @onclick="(() => showStatuses = true)">
                Status: <span class="selected-status">@statusFilter</span>
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (suggestions != null)
        {
            <Virtualize Items="suggestions" Context="s" OverscanCount="10">
                <div class="suggestion-entry my-3 mx-0">
                    <div class="d-flex flex-column justify-content-center text-center @GetVoteClass(s)" @onclick="(() => Vote(s))">
                        <div class="text-uppercase">@GetVotesText1(s)</div>
                        <span class="entry-upvote oi oi-caret-top"></span>
                        <div class="text-uppercase">@GetVotesText2(s)</div>
                    </div>
                    <div class="d-flex flex-column p-3 bg-white">
                        <div class="suggestion-entry-text-title flex-grow-1" @onclick="(() => OpenDetails(s))">@s.Name</div>
                        <div class="d-flex">
                            @if (archive == null || archive.Id != s.Id)
                            {
                                <div class="suggestion-entry-text-category text-uppercase d-flex flex-grow-1 align-items-end">@s.Category?.Name</div>
                                <AuthorizeView Policy="Admin">
                                    <button class="suggestion-entry-text-category btn border-0 bg-white py-0 px-3 text-uppercase d-flex flex-grow-0 align-items-end" @onclick="(() => archive = s)">Archive</button>
                                </AuthorizeView>
                            }
                            else
                            {
                                <button class="btn-archive-confirm btn text-uppercase flex-grow-1" @onclick="Archive">Confirm</button>
                                <button class="btn-archive-cancel btn text-uppercase flex-grow-1" @onclick="(() => archive = null)">Cancel</button>
                            }
                        </div>
                    </div>
                    <div class="suggestion-entry-status d-flex p-3 ps-1 @GetStatusClass(s)">
                        <div class="suggestion-entry-status-text text-uppercase text-center text-white p-1">@s.Status?.Name</div>
                    </div>
                </div>
            </Virtualize>
        }
    </div>

    @* Hidden on small devices *@
    <div class="col-md-4 col-xl-3 d-none d-md-block">
        @if (categories != null)
        {
            <div class="categories m-3 p-3">
                <span class="text-uppercase fw-bold">Category</span>
                <div class="mt-3 @GetSelectedCategory()" @onclick="(() => ChangeCategory())">All</div>
                @foreach (var c in categories)
                {
                    <div class="mt-3 @GetSelectedCategory(c.Name)" @onclick="(() => ChangeCategory(c.Name))">@c.Name</div>
                }
            </div>
        }

        @if (statuses != null)
        {
            <div class="statuses m-3 p-3">
                <span class="text-uppercase fw-bold">Status</span>
                <div class="mt-3 @GetSelectedStatus()" @onclick="(() => ChangeStatus())">All</div>
                @foreach (var s in statuses)
                {
                    <div class="mt-3 @GetSelectedStatus(s.Name)" @onclick="(() => ChangeStatus(s.Name))">@s.Name</div>
                }
            </div>
        }
    </div>
</div>

@code {
    List<Category> categories;
    List<Status> statuses;
    List<Suggestion> suggestions;

    User user;
    Suggestion archive;
    string categoryFilter = "All";
    string statusFilter = "All";
    string search = "";
    bool sortByNew = true;
    bool showCategories = false;
    bool showStatuses = false;

    protected override async Task OnInitializedAsync()
    {
        categories = await categoryService.FindAllAsync();
        statuses = await statusService.FindAllAsync();
        await LoadUser();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();
        }
    }

    async Task LoadFilterState()
    {
        var stringData = await storage.GetAsync<string>(nameof(categoryFilter));
        categoryFilter = stringData.Success ? stringData.Value : "All";

        stringData = await storage.GetAsync<string>(nameof(statusFilter));
        statusFilter = stringData.Success ? stringData.Value : "All";

        stringData = await storage.GetAsync<string>(nameof(search));
        search = stringData.Success ? stringData.Value : "";

        var boolData = await storage.GetAsync<bool>(nameof(sortByNew));
        sortByNew = boolData.Success ? boolData.Value : true;
    }

    async Task FilterSuggestions()
    {
        var output = suggestionService.FindAllApproved();

        if (categoryFilter != "All") 
            output = output.Where(s => s.Category?.Name == categoryFilter).ToList();

        if (statusFilter != "All") 
            output = output.Where(s => s.Status?.Name == statusFilter).ToList();

        if (!string.IsNullOrWhiteSpace(search)) 
            output = output.Where(s => s.Name.Contains(search, StringComparison.InvariantCultureIgnoreCase) || s.Description.Contains(search, StringComparison.InvariantCultureIgnoreCase)).ToList();

        if (sortByNew) 
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        else 
            output = output.OrderByDescending(s => s.Votes.Count).ThenByDescending(s => s.DateCreated).ToList();

        suggestions = output;
        await SaveFilterState();
    }

    async Task SaveFilterState()
    {
        await storage.SetAsync(nameof(categoryFilter), categoryFilter);
        await storage.SetAsync(nameof(statusFilter), statusFilter);
        await storage.SetAsync(nameof(search), search);
        await storage.SetAsync(nameof(sortByNew), sortByNew);
    }

    async Task ChangeCategory(string category = "All")
    {
        showCategories = false;
        categoryFilter = category;
        await FilterSuggestions();
    }

    async Task ChangeStatus(string status = "All")
    {
        showStatuses = false;
        statusFilter = status;
        await FilterSuggestions();
    }

    async Task SearchInput(string txt)
    {
        search = txt;
        await FilterSuggestions();
    }

    async Task SortByNew(bool byNew)
    {
        sortByNew = byNew;
        await FilterSuggestions();
    }

    string GetVotesText1(Suggestion suggestion) => suggestion.Votes.Any() ? suggestion.Votes.Count.ToString("00") : suggestion.Author.Id == user?.Id ? "Awaiting" : "Click to";
    string GetVotesText2(Suggestion suggestion) => suggestion.Votes.Count > 1 ? "Votes" : "Vote";
    void OpenDetails(Suggestion suggestion) => nav.NavigateTo("/details/" + suggestion.Id);

    // This will create the logged in user in mongodb if it doesnt exist. It will also update user details if its different from azure.
    async Task LoadUser()
    {
        var authState = await auth.GetAuthenticationStateAsync();
        var objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        if (!string.IsNullOrWhiteSpace(objectId))
        {
            user = await userService.FindOneFromAuthAsync(objectId) ?? new();

            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            bool isDirty = false;
            if (!objectId.Equals(user.ObjectIdentifier))
            {
                isDirty = true;
                user.ObjectIdentifier = objectId;
            }
            if (!firstName.Equals(user.FirstName))
            {
                isDirty = true;
                user.FirstName = firstName;
            }
            if (!lastName.Equals(user.LastName))
            {
                isDirty = true;
                user.LastName = lastName;
            }
            if (!displayName.Equals(user.DisplayName))
            {
                isDirty = true;
                user.DisplayName = displayName;
            }
            if (!email.Equals(user.Email))
            {
                isDirty = true;
                user.Email = email;
            }

            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(user.Id))
                    await userService.InsertOneAsync(user);
                else
                    await userService.ReplaceOneAsync(user);
            }
        }
    }

    async Task Vote(Suggestion suggestion)
    {
        if (user != null)
        {
            if (suggestion.Author.Id == user.Id) 
                return;

            if (!suggestion.Votes.Add(user.Id)) 
                suggestion.Votes.Remove(user.Id);

            await suggestionService.VoteAsync(suggestion.Id, user.Id);

            if (!sortByNew)
                suggestions = suggestions.OrderByDescending(s => s.Votes.Count).ThenByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            nav.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    void GoSuggest()
    {
        if (user != null)
            nav.NavigateTo("/create");
        else
            nav.NavigateTo("MicrosoftIdentity/Account/SignIn", true);
    }

    async Task Archive()
    {
        archive.Archived = true;
        await suggestionService.ReplaceOneAsync(archive);
        suggestions.Remove(archive);
        archive = null;
        // await FilterSuggestions();
    }

    // Conditional apply css classes
    string GetSortNewClass(bool isNew) => isNew == sortByNew ? "sort-selected" : "";

    string GetVoteClass(Suggestion suggestion)
    {
        if (suggestion.Votes == null || !suggestion.Votes.Any())
            return "suggestion-entry-no-votes";
        else if (suggestion.Votes.Contains(user?.Id))
            return "suggestion-entry-voted";
        else
            return "suggestion-entry-not-voted";
    }

    string GetStatusClass(Suggestion suggestion)
    {
        if (suggestion == null || suggestion.Status == null)
            return "suggestion-entry-status-none";

        return suggestion.Status.Name switch
        {
            "Completed" => "suggestion-entry-status-completed",
            "Watching" => "suggestion-entry-status-watching",
            "Upcoming" => "suggestion-entry-status-upcoming",
            "Dismissed" => "suggestion-entry-status-dismissed",
            _ => "suggestion-entry-status-none"
        };
    }

    string GetSelectedCategory(string category = "All") => category == categoryFilter ? "selected-category" : "";
    string GetSelectedStatus(string status = "All") => status == statusFilter ? "selected-status" : "";
}
